#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this page we will look at how beacons interact with objects placed in
 a polygon.
 We will define relevant regions in a polygon, with respect to one or more
 beacons and interacting objects, namely the Attraction Region 
\begin_inset Formula $A\left(b\right)$
\end_inset

 of a beacon 
\begin_inset Formula $b$
\end_inset

 and the Inverse Attraction Region 
\begin_inset Formula $IA\left(p\right)$
\end_inset

 of a point 
\begin_inset Formula $p$
\end_inset

, and we will look at their key properties.
 We will also see how to compute those regions, then we will give algorithms
 that exploit the knowledge of them to route an object starting at a position
 
\begin_inset Formula $s$
\end_inset

 until a final point 
\begin_inset Formula $t$
\end_inset

.
\begin_inset Newline newline
\end_inset

The content of this page is a re-elaboration from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

.
\begin_inset Newline newline
\end_inset

In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Setting-and-Terminology"

\end_inset

 we describe the generic setting that we consider throughout the page and
 give basic definitions; Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Vertices-Classification"

\end_inset

 is devoted to classify a polygon's vertices with respect to a beacon contained
 in it; in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:The-Attraction-Region"

\end_inset

 we define the Attraction Region of a beacon, give its properties and algorithms
 to compute it; in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:The-Inverse-Attraction"

\end_inset

 we discuss the Inverse Attraction Region of a point, following an outline
 that is similar to the previous section; Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Algorithms-for-Beacon-Based"

\end_inset

 contains two algorithm that route an object from a point 
\begin_inset Formula $s$
\end_inset

 to a point 
\begin_inset Formula $t$
\end_inset

.
 One requires a set of candidate intermediate beacons, the other is a polynomial
-time approximation of the optimal route.
\end_layout

\begin_layout Section
Setting and Terminology
\begin_inset CommandInset label
LatexCommand label
name "sec:Setting-and-Terminology"

\end_inset


\end_layout

\begin_layout Standard
We consider a 
\emph on
polygon
\emph default
 
\begin_inset Formula $P$
\end_inset

, whose boundary edges are oriented counterclockwise (the edges of a hole
 are instead oriented clockwise).
 A 
\emph on
beacon
\emph default
 
\begin_inset Formula $b$
\end_inset

 is a point in the interior of 
\begin_inset Formula $\partial P$
\end_inset

 that can be activated to exercise a 'magnetic pull' on an object initially
 placed at a point 
\begin_inset Formula $p\epsilon P$
\end_inset

.
 
\begin_inset Newline newline
\end_inset

When 
\begin_inset Formula $b$
\end_inset

 is active, the object decreases its Euclidean distance from 
\begin_inset Formula $b$
\end_inset

 greedily, following a straight line towards b until it reaches either 
\begin_inset Formula $b$
\end_inset

 or
\begin_inset Formula $\partial P$
\end_inset

.
 In the second case, it slides along 
\begin_inset Formula $\partial P$
\end_inset

 provided that its distance from 
\begin_inset Formula $b$
\end_inset

 decreases monotonically.
 When the object is no more constrained by 
\begin_inset Formula $\partial P$
\end_inset

, it moves again in a straight line.
 Thus, a generic route from a point 
\begin_inset Formula $p$
\end_inset

 to a beacon 
\begin_inset Formula $b$
\end_inset

 alternates between these described modes.
\begin_inset Newline newline
\end_inset

If the object reaches a point in which the distance from 
\begin_inset Formula $b$
\end_inset

 cannot decrease that is different from
\begin_inset Formula $b$
\end_inset

, we say the object is 
\emph on
stuck
\emph default
.
 The reached point is called a 
\emph on
dead point
\emph default
 on 
\begin_inset Formula $\partial P$
\end_inset

 for beacon 
\begin_inset Formula $b$
\end_inset

.
 The set of dead points for 
\begin_inset Formula $b$
\end_inset

 is referred to as 
\begin_inset Formula $D\left(b\right)$
\end_inset

 If an object starting at 
\begin_inset Formula $p$
\end_inset

 is able to reach 
\begin_inset Formula $b$
\end_inset

, we say that 
\begin_inset Formula $b$
\end_inset

 
\emph on
attracts
\emph default
 
\begin_inset Formula $p$
\end_inset

 (
\begin_inset Formula $p$
\end_inset

 
\emph on
is attracted to
\emph default
 
\begin_inset Formula $b$
\end_inset

).
\begin_inset Newline newline
\end_inset

When routing an object from a starting point 
\begin_inset Formula $p$
\end_inset

 to a destination 
\begin_inset Formula $t$
\end_inset

, we use a set 
\begin_inset Formula $M$
\end_inset

 of beacon points, which we activate in sequence: only one beacon at a time
 is active, and it remains active until it is reached by the object.
 At that point the next beacon is activated and the old one is simultaneously
 deactivated.
 We say that 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

 are 
\emph on
routed
\emph default
 if we can find a set 
\begin_inset Formula $M'$
\end_inset

of beacon points that, if activated in the right sequence, can route an
 object from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

.
\begin_inset Newline newline
\end_inset

Given a dead point 
\begin_inset Formula $d$
\end_inset

 and a beacon 
\begin_inset Formula $b$
\end_inset

, we call 
\begin_inset Formula $DR_{b}\left(d\right)$
\end_inset

 the 
\emph on
dead region
\emph default
 of 
\begin_inset Formula $d$
\end_inset

 with respect to 
\begin_inset Formula $b$
\end_inset

, which we define as the set of points 
\begin_inset Formula $p\epsilon P$
\end_inset

 that will eventually get stuck at 
\begin_inset Formula $d$
\end_inset

 under the influence of 
\begin_inset Formula $b$
\end_inset

.
 There are two types of dead points: vertex dead points and edge dead points.
\begin_inset Newline newline
\end_inset

We can distinguish points belonging to 
\begin_inset Formula $\partial P$
\end_inset

 as 
\emph on
odd boundary points 
\emph default
or 
\emph on
even boundary points, 
\emph default
depending on whether an object placed at them moves unconstrained or along
 
\begin_inset Formula $\partial P$
\end_inset

 under the influence of 
\begin_inset Formula $b$
\end_inset

.
 It can be easily seen that all dead points are even boundary points.
\end_layout

\begin_layout Section
The Attraction Region
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Attraction-Region"

\end_inset


\end_layout

\begin_layout Subsection
Definition
\end_layout

\begin_layout Standard
The Attraction Region of a polygon 
\begin_inset Formula $P$
\end_inset

 is defined as follows:
\end_layout

\begin_layout Definition
The Attraction Region 
\begin_inset Formula $A(b)$
\end_inset

 of a beacon 
\begin_inset Formula $b$
\end_inset

 is the set of points 
\begin_inset Formula $p\epsilon P$
\end_inset

 that are attracted to b.
\end_layout

\begin_layout Subsection
Properties
\end_layout

\begin_layout Standard
We would like to obtain insights on how to easily define the boundaries
 of Attraction Regions, so we explore some of their properties, but also
 the properties of other related entities.
\begin_inset Newline newline
\end_inset

Let's start by asking ourselves how many dead points are there, given a
 beacon 
\begin_inset Formula $b$
\end_inset

.
 The following theorems give us tight bounds, distinguishing between polygons
 without or with holes.
\end_layout

\begin_layout Theorem
Given a simple polygon 
\begin_inset Formula $P$
\end_inset

 with 
\begin_inset Formula $n$
\end_inset

 vertices, we have 
\begin_inset Formula $0\leq\left|D(b)\right|\leq n-3$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $P$
\end_inset

 is convex it has no dead points, so the lower bound can be easily observed.
 For the upper bound, consider a beacon 
\begin_inset Formula $b\epsilon P$
\end_inset

.
 It can be easily seen that at least 
\begin_inset Formula $3$
\end_inset

 edges of 
\begin_inset Formula $P$
\end_inset

 are visible to 
\begin_inset Formula $b$
\end_inset

, so any ray starting from 
\begin_inset Formula $b$
\end_inset

 that crosses these edges would cross them first.
 Thus we would have an odd number of crossings for each of these three edges,
 that consequently cannot contain dead points.
 Finally, an edge contains at most 
\begin_inset Formula $1$
\end_inset

 dead point, so the given upper bound holds.
\end_layout

\begin_layout Theorem
Given a polygon 
\begin_inset Formula $P$
\end_inset

 with 
\begin_inset Formula $n$
\end_inset

 vertices and 
\begin_inset Formula $h$
\end_inset

 holes, we have 
\begin_inset Formula $0\leq\left|D(b)\right|\leq n-h-3$
\end_inset

.
\end_layout

\begin_layout Proof
This time we can observe the lower bound by taking a convex polygon with
 the holes being only triangles, oriented so that they don't have any dead
 points.
 For the upper bound, first imagine to remove the holes from 
\begin_inset Formula $P$
\end_inset

 and consider the resulting simple polygon 
\begin_inset Formula $P'$
\end_inset

.
 If 
\begin_inset Formula $n_{i}$
\end_inset

 is the number of vertices of the 
\begin_inset Formula $i$
\end_inset

th hole, then 
\begin_inset Formula $P'$
\end_inset

 has 
\begin_inset Formula $n-\sum_{i}n_{i}$
\end_inset

 vertices.
 
\begin_inset Formula $b\epsilon P$
\end_inset

 so 
\begin_inset Formula $P'$
\end_inset

 as at most 
\begin_inset Formula $n-\sum_{i}n_{i}-3$
\end_inset

.
 To be continued with figures
\end_layout

\begin_layout Standard
Thanks to these theorems, we can limit the number of dead points for a beacon
 
\begin_inset Formula $b$
\end_inset

, thus we can also limit the number of its dead regions.
 We take a step further towards our goal by stating that the dead regions
 of 
\begin_inset Formula $b$
\end_inset

 and 
\begin_inset Formula $A\left(b\right)$
\end_inset

 form a partition of 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Theorem
The dead regions of a beacon
\begin_inset Formula $b$
\end_inset

 in a polygon 
\begin_inset Formula $P$
\end_inset

, along with 
\begin_inset Formula $A\left(b\right)$
\end_inset

 partition 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Proof
First of all, an object starting at a point in 
\begin_inset Formula $P$
\end_inset

 will either reach 
\begin_inset Formula $b$
\end_inset

 or a dead point 
\begin_inset Formula $d$
\end_inset

, thus fulfilling the requirement that the regions taken togheter yeld 
\begin_inset Formula $P$
\end_inset

.
 It remains to show that these regions don't overlap.
 In a situation as that of Figure, our definitions are not enough precise
 to decide along which edge incident to a reflex vertex 
\begin_inset Formula $v$
\end_inset

 an object at 
\begin_inset Formula $v$
\end_inset

 will slide.
 The problem is eliminated by adopting the convention that objects at 
\begin_inset Formula $v$
\end_inset

 go always left.
 We have ensured that an object will follow a unique path under the influence
 of 
\begin_inset Formula $b$
\end_inset

: 
\begin_inset Formula $P$
\end_inset

 is subdivided into disjoint regions.
 From what we said, each point is located in a region, so the proof is complete.
\end_layout

\begin_layout Standard
This result gives us an interesting hint, because it tells us that to identify
 
\begin_inset Formula $A\left(b\right)$
\end_inset

 we can try to determine the edges of the partition induced by 
\begin_inset Formula $b$
\end_inset

.
 How to do this? It turns out that we need to use a particular kind of vertices
 in 
\begin_inset Formula $P$
\end_inset

, called split vertices.
 We elaborate on them in the next subsection.
\end_layout

\begin_layout Subsection
Split Vertices
\end_layout

\begin_layout Standard
We start by defining 
\emph on
cut vertices
\emph default
, which are a particular case of reflex vertices.
\end_layout

\begin_layout Definition
Given a reflex vertex 
\begin_inset Formula $p$
\end_inset

, we say that 
\begin_inset Formula $p$
\end_inset

 is a cut vertex if the ray 
\begin_inset Formula $\overrightarrow{bp}$
\end_inset

 with its origin translated to 
\begin_inset Formula $p$
\end_inset

 cuts the interior of 
\begin_inset Formula $\partial P$
\end_inset

 starting immediately from 
\begin_inset Formula $p$
\end_inset

.
\end_layout

\begin_layout Standard
How do we recognize a cut vertex? We can simply compute two dot products,
 as the next proposition precises.
\end_layout

\begin_layout Proposition
Given a reflex vertex 
\begin_inset Formula $p_{i}$
\end_inset

, we say it is a cut vertex if:
\end_layout

\begin_layout Proposition
1.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}<0$
\end_inset

 (Class I)
\end_layout

\begin_layout Proposition
2.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}>0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}<0$
\end_inset

 (Class II)
\end_layout

\begin_layout Proposition
3.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset

 (Class III)
\end_layout

\begin_layout Standard
Now, a split vertex is just a particular case of cut vertex.
 We can identify it just by computing some additional dot products:
\end_layout

\begin_layout Proposition
Given a cut vertex 
\begin_inset Formula $p_{i}$
\end_inset

, we say it is a reflex vertex if and only if:
\end_layout

\begin_layout Proposition
1.
 It is a class I cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

, 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset

b
\end_layout

\begin_layout Proposition
2.
 It is a class II cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset


\end_layout

\begin_layout Proposition
3.
 It is a class III cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset


\end_layout

\begin_layout Standard
Given a beacon 
\begin_inset Formula $b$
\end_inset

 and a split vertex 
\begin_inset Formula $p_{i}$
\end_inset

 with respect to 
\begin_inset Formula $b$
\end_inset

, we can identify the corresponding 
\emph on
split edge
\emph default
 by considering the first intersection of the ray 
\begin_inset Formula $\overrightarrow{bp_{i}}$
\end_inset

 starting at 
\begin_inset Formula $p_{i}$
\end_inset

 with 
\begin_inset Formula $\partial P$
\end_inset

, which we call the 
\emph on
ray vertex
\emph default
.
 Split edges play a central role in the partition induced by a beacon: they
 are the boundary between two adjacent regions (although in polygons wih
 holes they might be entirely contained in a region).
\end_layout

\begin_layout Theorem
Given a simple polygon 
\begin_inset Formula $P$
\end_inset

 and one of its split edges 
\begin_inset Formula $e=\overline{p_{i}q_{i}}$
\end_inset

 with respect to a beacon 
\begin_inset Formula $b$
\end_inset

 (
\begin_inset Formula $q_{i}$
\end_inset

 is the ray vertex), 
\begin_inset Formula $e$
\end_inset

 represents the boundary between two dead regions or between 
\begin_inset Formula $A\left(b\right)$
\end_inset

 and a dead region.
 This might not be the case for a polygon with holes, where 
\begin_inset Formula $e$
\end_inset

 might be entirely contained in the interior of 
\begin_inset Formula $A\left(b\right)$
\end_inset

 or a dead region, but it can intersect at most one region.
\end_layout

\begin_layout Proof
Consider first the case where 
\begin_inset Formula $P$
\end_inset

 is simple.
 Then 
\begin_inset Formula $e$
\end_inset

 represents a diagonal of 
\begin_inset Formula $P+q_{i}$
\end_inset

.
 This polygon is divided into two parts, that we call 
\begin_inset Formula $P_{L}$
\end_inset

and 
\begin_inset Formula $P_{R}$
\end_inset

.
 We need to figure out how an object could possibly cross 
\begin_inset Formula $e$
\end_inset

 under the attracion of 
\begin_inset Formula $b$
\end_inset

 , and show that any possible case is infeasible.
 Objects placed on 
\begin_inset Formula $e$
\end_inset

 will eventually reach 
\begin_inset Formula $p_{i}$
\end_inset

 and slide left, because of our convention.
 What's more, an object moving unconstrained under the influence of 
\begin_inset Formula $b$
\end_inset

 could never cross 
\begin_inset Formula $e$
\end_inset

 and switch between 
\begin_inset Formula $P_{L}$
\end_inset

and 
\begin_inset Formula $P_{R}$
\end_inset

, because e is parallel to the ray 
\begin_inset Formula $\overrightarrow{bp_{i}}$
\end_inset

.
 It remains to handle the case where the objects starts sliding along 
\begin_inset Formula $\partial P$
\end_inset

.
 But the crossing of 
\begin_inset Formula $e$
\end_inset

 cannot happen here, because of the following argument.
 
\begin_inset Formula $p_{i}$
\end_inset

 is a split vertex; this means that objects sliding along the edges adjacent
 to 
\begin_inset Formula $p_{i}$
\end_inset

 move away from it, thus if they are on differents sides of 
\begin_inset Formula $e$
\end_inset

, they are in different regions.
 
\begin_inset Formula $e$
\end_inset

 is on the the boundary of at most two regions, because the points on a
 ray move unconstrained until they all meet 
\begin_inset Formula $\partial P$
\end_inset

 at hte same location, meaning that they will end up in the same point.
 Thus ray on different sides of 
\begin_inset Formula $e$
\end_inset

 are in different regions, that have 
\begin_inset Formula $e$
\end_inset

 as boundary.
\begin_inset Newline newline
\end_inset

If 
\begin_inset Formula $P$
\end_inset

 has holes, some points on different sides of 
\begin_inset Formula $e$
\end_inset

 could slide around a hole and end up in the same location, causing 
\begin_inset Formula $e$
\end_inset

 to be contained in a region.
\end_layout

\begin_layout Standard
We are now close to a correct description of a partition induced by a beacon
 
\begin_inset Formula $b$
\end_inset

 on a polygon 
\begin_inset Formula $P$
\end_inset

.
 In addition to split edges, we need to say something about the edges of
 
\begin_inset Formula $\partial P$
\end_inset

, and establish which kind of edges can form the partition.
\end_layout

\begin_layout Theorem
A boundary edge of a region in the partition of a simple polygon 
\begin_inset Formula $P$
\end_inset

 induced by a beacon 
\begin_inset Formula $b$
\end_inset

 can be either:
\end_layout

\begin_layout Theorem
1.
 An edge of 
\begin_inset Formula $P$
\end_inset

 that has not been divided by a split edge
\end_layout

\begin_layout Theorem
2.
 A split edge
\end_layout

\begin_layout Theorem
3.
 An edge of the form 
\begin_inset Formula $\left(p_{k},q_{i}\right)$
\end_inset

, 
\begin_inset Formula $\left(q_{i},p_{l}\right)$
\end_inset

 or 
\begin_inset Formula $\left(q_{i},q_{j}\right)$
\end_inset

, with 
\begin_inset Formula $q_{i}$
\end_inset

and 
\begin_inset Formula $q_{j}$
\end_inset

 adjacent ray vertices lying on the edge 
\begin_inset Formula $e=\left(p_{k},p_{l}\right)$
\end_inset

.
\end_layout

\begin_layout Proof
For simple polygons, let us start by noticing that all the edges are on
 the boundary of one or more regions, because all the points in 
\begin_inset Formula $P$
\end_inset

 belong to the partition.
 We have already talked about split edges.
 We can easily notice that the edges descibed at the third element of our
 list are components of an edge of 
\begin_inset Formula $P$
\end_inset

, that have been split by one or more ray vertices, in such a way that they
 are on the boundary of only one region, while the original edge 
\begin_inset Formula $\left(p_{k},p_{l}\right)$
\end_inset

is on the boundary of a different region per different component.
 We are not done yet; we need to show that no other type of edge can be
 on the boundary of a region.
 Let us imagine that there exists a component 
\begin_inset Formula $c$
\end_inset

 on the boundary of a region that isn't of any type mentioned so far.
 First, it cannot be that any part of 
\begin_inset Formula $c$
\end_inset

 isn't parallel to a ray casted from the beacon 
\begin_inset Formula $b$
\end_inset

, that intesects 
\begin_inset Formula $c$
\end_inset

, because otherwise objects on some points of the ray would move unconstrained
 until they would cross 
\begin_inset Formula $c$
\end_inset

, thus sharing the region of the points on the other side of 
\begin_inset Formula $c$
\end_inset

 .
 We also have to take into account that 
\begin_inset Formula $c$
\end_inset

 would intersect 
\begin_inset Formula $P$
\end_inset

 at two points, that we may call 
\begin_inset Formula $s_{1}$
\end_inset

 and 
\begin_inset Formula $s_{2}$
\end_inset

.
 Assume that 
\begin_inset Formula $s_{1}$
\end_inset

 is the closer to 
\begin_inset Formula $b$
\end_inset

 between the two.
 Where is 
\begin_inset Formula $s_{1}$
\end_inset

? It turns out that it must be a vertex of 
\begin_inset Formula $P$
\end_inset

.
 Points on 
\begin_inset Formula $c$
\end_inset

 will reach 
\begin_inset Formula $s_{1}$
\end_inset

.
 If 
\begin_inset Formula $s_{1}$
\end_inset

 was in the interior of an edge of 
\begin_inset Formula $P$
\end_inset

, we would have crossings of 
\begin_inset Formula $c$
\end_inset

: in case 
\begin_inset Formula $s_{1}$
\end_inset

 was a dead point, objects from either side would get stuck at 
\begin_inset Formula $s_{1}$
\end_inset

, in case not, objects would slide along the edge containing 
\begin_inset Formula $s_{1}$
\end_inset

, ending again at the same dead point.
 Now if we think about which of the elements of our list has the characteristics
 of 
\begin_inset Formula $c$
\end_inset

 (acting as a separator of the points on different sides), we see that it
 is exactly a split edge, with 
\begin_inset Formula $s_{1}$
\end_inset

 as the split vertex.
\begin_inset Newline newline
\end_inset

In a polygon with holes, it might happen that some split edges or components
 of divided edges are not on the boundary of a region.
\end_layout

\begin_layout Standard
Now we can define a concrete strateg
\end_layout

\begin_layout Section
Vertices Classification
\begin_inset CommandInset label
LatexCommand label
name "sec:Vertices-Classification"

\end_inset


\end_layout

\begin_layout Section
The Inverse Attraction Region
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Inverse-Attraction"

\end_inset


\end_layout

\begin_layout Section
Algorithms for Beacon-Based Routing
\begin_inset CommandInset label
LatexCommand label
name "sec:Algorithms-for-Beacon-Based"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "geometric-routing,routing-guarding"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
