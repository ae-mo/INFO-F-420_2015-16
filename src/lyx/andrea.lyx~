#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass amsart
\begin_preamble
\usepackage{algorithmic}
\floatname{algorithm}{Algorithm}
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
theorems-sec
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
In this page we will look at how beacons interact with objects placed in
 a polygon.
 We will define relevant regions in a polygon, with respect to one or more
 beacons and interacting objects, namely the Attraction Region 
\begin_inset Formula $A\left(b\right)$
\end_inset

 of a beacon 
\begin_inset Formula $b$
\end_inset

 and the Inverse Attraction Region 
\begin_inset Formula $IA\left(p\right)$
\end_inset

 of a point 
\begin_inset Formula $p$
\end_inset

, and we will look at their key properties.
 We will also see how to compute those regions, then we will give algorithms
 that exploit the knowledge of them to route an object starting at a position
 
\begin_inset Formula $s$
\end_inset

 until a final point 
\begin_inset Formula $t$
\end_inset

.
\begin_inset Newline newline
\end_inset

The content of this page is re-elaborated from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

.
\begin_inset Newline newline
\end_inset

In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Setting-and-Terminology"

\end_inset

 we describe the generic setting that we consider throughout the page and
 give basic definitions; in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:The-Attraction-Region"

\end_inset

 we define the Attraction Region of a beacon and give its properties and
 algorithms to compute it; in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:The-Inverse-Attraction"

\end_inset

 we discuss the Inverse Attraction Region of a point, following an outline
 that is similar to that of the previous section; Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Algorithms-for-Beacon-Based"

\end_inset

 presents two algorithms that route an object from a point 
\begin_inset Formula $s$
\end_inset

 to a point 
\begin_inset Formula $t$
\end_inset

.
 One requires a set of candidate intermediate beacons, the other is a polynomial
-time approximation of the optimal routing path.
 Finally, in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Applet"

\end_inset

, we provide the link to an applet that allows to experiment with the concepts
 described in this page.
\end_layout

\begin_layout Section
Setting and Terminology
\begin_inset CommandInset label
LatexCommand label
name "sec:Setting-and-Terminology"

\end_inset


\end_layout

\begin_layout Standard
All the terminology and mathematical statements in this Section are taken
 from 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

.
\begin_inset Newline newline
\end_inset

We consider a 
\emph on
polygon
\emph default
 
\begin_inset Formula $P$
\end_inset

, not self-intersecting, possibly with holes, whose boundary edges are oriented
 counterclockwise (the edges of a hole are instead oriented clockwise).
 A 
\emph on
beacon
\emph default
 
\begin_inset Formula $b$
\end_inset

 is a point in the interior of 
\begin_inset Formula $\partial P$
\end_inset

 that can be activated to exercise a 'magnetic pull' on an object initially
 placed at a point 
\begin_inset Formula $p\in P$
\end_inset

.
 
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/1.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
A beacon 
\begin_inset Formula $b$
\end_inset

 excercises a 'magnetic pull' on a point 
\begin_inset Formula $p$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

When 
\begin_inset Formula $b$
\end_inset

 is active, the object decreases its Euclidean distance from 
\begin_inset Formula $b$
\end_inset

 greedily, following a straight line towards 
\begin_inset Formula $b$
\end_inset

 until it reaches either 
\begin_inset Formula $b$
\end_inset

 or 
\begin_inset Formula $\partial P$
\end_inset

.
 In the second case, it slides along 
\begin_inset Formula $\partial P$
\end_inset

, provided that its distance from 
\begin_inset Formula $b$
\end_inset

 decreases monotonically.
 When the object is no more constrained by 
\begin_inset Formula $\partial P$
\end_inset

, it moves again in a straight line.
 Thus, a generic route from a point 
\begin_inset Formula $p$
\end_inset

 to a beacon 
\begin_inset Formula $b$
\end_inset

 alternates between these described modes.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/2.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An object starting at 
\begin_inset Formula $p$
\end_inset

 moves unconstrained 
\begin_inset Newline newline
\end_inset

unless it meets 
\begin_inset Formula $\partial P$
\end_inset

, then it slides along it.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

If the object reaches a point in which the distance from 
\begin_inset Formula $b$
\end_inset

 cannot decrease that is different from
\begin_inset Formula $b$
\end_inset

, we say the object is 
\emph on
stuck
\emph default
.
 The reached point is called a 
\emph on
dead point
\emph default
 on 
\begin_inset Formula $\partial P$
\end_inset

 for beacon 
\begin_inset Formula $b$
\end_inset

.
 The set of dead points for 
\begin_inset Formula $b$
\end_inset

 is referred to as 
\begin_inset Formula $D\left(b\right)$
\end_inset

.
 If an object starting at 
\begin_inset Formula $p$
\end_inset

 is able to reach 
\begin_inset Formula $b$
\end_inset

, we say that 
\begin_inset Formula $b$
\end_inset

 
\emph on
attracts
\emph default
 
\begin_inset Formula $p$
\end_inset

 (
\begin_inset Formula $p$
\end_inset

 
\emph on
is attracted to
\emph default
 
\begin_inset Formula $b$
\end_inset

).
\begin_inset Newline newline
\end_inset

When routing an object from a starting point 
\begin_inset Formula $p$
\end_inset

 to a destination 
\begin_inset Formula $t$
\end_inset

, we use a set 
\begin_inset Formula $M$
\end_inset

 of beacon points, which we activate in sequence: only one beacon at a time
 is active, and it remains active until it is reached by the object.
 At that point the next beacon is activated and the old one is simultaneously
 deactivated.
 We say that 
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

 are 
\emph on
routed
\emph default
 if we can find a set 
\begin_inset Formula $M'$
\end_inset

 of beacon points that, when activated in the right sequence, can route
 an object from 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:routed"

\end_inset

 for an example.
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/5.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:routed"

\end_inset


\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

 are routed.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Given a dead point 
\begin_inset Formula $d$
\end_inset

 and a beacon 
\begin_inset Formula $b$
\end_inset

, we call 
\begin_inset Formula $DR_{b}\left(d\right)$
\end_inset

 the 
\emph on
dead region
\emph default
 of 
\begin_inset Formula $d$
\end_inset

 with respect to 
\begin_inset Formula $b$
\end_inset

, which we define as the set of points 
\begin_inset Formula $p\in P$
\end_inset

 that will eventually get stuck at 
\begin_inset Formula $d$
\end_inset

 under the influence of 
\begin_inset Formula $b$
\end_inset

.
 There are two types of dead points: vertex dead points and edge dead points.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/6.png
	scale 39

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The dead region of 
\begin_inset Formula $d$
\end_inset

 is shown in red.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/3.png
	scale 39

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $d$
\end_inset

 is a vertex dead point.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/4.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $d$
\end_inset

 is an edge dead point.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Types of dead points.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

We can distinguish points belonging to 
\begin_inset Formula $\partial P$
\end_inset

 as 
\emph on
odd boundary points 
\emph default
or 
\emph on
even boundary points, 
\emph default
depending on whether an object placed at them moves unconstrained or along
 
\begin_inset Formula $\partial P$
\end_inset

 under the influence of 
\begin_inset Formula $b$
\end_inset

.
 Can we characterize even and odd boundary points in some other way? Yes,
 as the following proposition states.
 This characterization will be useful later.
\end_layout

\begin_layout Proposition
Given a poligon 
\begin_inset Formula $P$
\end_inset

, a point 
\begin_inset Formula $p\in\partial P$
\end_inset

 and a beacon 
\begin_inset Formula $b\in P$
\end_inset

, 
\begin_inset Formula $p$
\end_inset

 is an odd (even) boundary point with respect to 
\begin_inset Formula $b$
\end_inset

 if and only if the line segment 
\begin_inset Formula $\overline{bp}$
\end_inset

 crosses 
\begin_inset Formula $\partial P$
\end_inset

 an odd (even) number of times.
\end_layout

\begin_layout Proof
Let us consider the line segment 
\begin_inset Formula $\overline{bp}$
\end_inset

 .
 Let us assume it crosses 
\begin_inset Formula $\partial P$
\end_inset

 
\begin_inset Formula $k$
\end_inset

 times.
 We have that the crossings divide 
\begin_inset Formula $\overline{bp}$
\end_inset

 into 
\begin_inset Formula $k+1$
\end_inset

 segments.
 The first one lies of course entirely in 
\begin_inset Formula $P$
\end_inset

, and the same holds for all odd numbered segments.
 Conversely, all even numbered segments lie outside 
\begin_inset Formula $P$
\end_inset

.
 Now, if 
\begin_inset Formula $\overline{bp}$
\end_inset

 crosses 
\begin_inset Formula $\partial P$
\end_inset

 an even number of times, counting 
\begin_inset Formula $p$
\end_inset

 as a crossing, the final segment before 
\begin_inset Formula $p$
\end_inset

 lies outside 
\begin_inset Formula $P$
\end_inset

, thus an object at 
\begin_inset Formula $p$
\end_inset

 cannot move along 
\begin_inset Formula $\overline{bp}$
\end_inset

 because it is constrained by the edge(s) containing 
\begin_inset Formula $p$
\end_inset

, making 
\begin_inset Formula $p$
\end_inset

 an even boundary point.
 On the other hand, if 
\begin_inset Formula $\overline{bp}$
\end_inset

 crosses 
\begin_inset Formula $\partial P$
\end_inset

 an odd number of times, the last segment is inside 
\begin_inset Formula $P$
\end_inset

, making 
\begin_inset Formula $p$
\end_inset

 an odd boundary point.
\end_layout

\begin_layout --Separator--
From the previous proposition we get the following Corollary.
\end_layout

\begin_layout Corollary
Given a dead point 
\begin_inset Formula $d$
\end_inset

 with respect to a beacon 
\begin_inset Formula $b$
\end_inset

 in a polygon 
\begin_inset Formula $P$
\end_inset

, the line segment 
\begin_inset Formula $\overline{bd}$
\end_inset

 intersects 
\begin_inset Formula $\partial P$
\end_inset

 an even number of times.
\end_layout

\begin_layout Standard
Another useful Theorem (see 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

 for its proof) bounds the number of dead points that can be found on an
 edge.
\end_layout

\begin_layout Theorem
Given an edge 
\begin_inset Formula $e$
\end_inset

 of 
\begin_inset Formula $\partial P$
\end_inset

, 
\begin_inset Formula $e$
\end_inset

 contains at most 
\begin_inset Formula $1$
\end_inset

 dead point.
\end_layout

\begin_layout Section
The Attraction Region
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Attraction-Region"

\end_inset


\end_layout

\begin_layout Standard
All the terminology and mathematical statements in this Section are taken
 from 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

.
\end_layout

\begin_layout Subsection
Definition
\end_layout

\begin_layout Standard
The Attraction Region of a polygon 
\begin_inset Formula $P$
\end_inset

 is defined as follows:
\end_layout

\begin_layout Definition
The Attraction Region 
\begin_inset Formula $A(b)$
\end_inset

 of a beacon 
\begin_inset Formula $b$
\end_inset

 is the set of points 
\begin_inset Formula $p\in P$
\end_inset

 that are attracted to 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Definition
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/7.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The attraction region of 
\begin_inset Formula $b$
\end_inset

 is shown in green.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Properties
\end_layout

\begin_layout Standard
We would like to obtain insights on how to easily define the boundaries
 of Attraction Regions, so we explore some of their properties, but also
 the properties of other related entities.
\begin_inset Newline newline
\end_inset

Let's start by asking ourselves how many dead points are there, given a
 beacon 
\begin_inset Formula $b$
\end_inset

.
 The following theorems give us tight bounds, distinguishing between polygons
 without or with holes.
\end_layout

\begin_layout Theorem
Given a simple polygon 
\begin_inset Formula $P$
\end_inset

 with 
\begin_inset Formula $n$
\end_inset

 vertices, we have 
\begin_inset Formula $0\leq\left|D(b)\right|\leq n-3$
\end_inset

.
\end_layout

\begin_layout Proof
If 
\begin_inset Formula $P$
\end_inset

 is convex it has no dead points, so the lower bound can be easily observed.
 For the upper bound, consider a beacon 
\begin_inset Formula $b\in P$
\end_inset

.
 It can be easily seen that at least 
\begin_inset Formula $3$
\end_inset

 edges of 
\begin_inset Formula $P$
\end_inset

 are visible to 
\begin_inset Formula $b$
\end_inset

, so any ray starting from 
\begin_inset Formula $b$
\end_inset

 that crosses these edges would cross them first.
 Thus we would have an odd number of crossings for each of these three edges,
 that consequently cannot contain dead points.
 Finally, an edge contains at most 
\begin_inset Formula $1$
\end_inset

 dead point, so the given upper bound holds.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:dead-bound"

\end_inset

 for an example.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/8.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:dead-bound"

\end_inset


\begin_inset Formula $P$
\end_inset

 has 
\begin_inset Formula $7-3=n-3=4$
\end_inset

 dead points.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/9.png
	scale 49

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:dead-holes"

\end_inset


\begin_inset Formula $P$
\end_inset

 has 
\begin_inset Formula $13-2-3=n-h-3=8$
\end_inset

 dead points.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Polygons showing that the upper bounds for dead points are reachable.
\begin_inset Newline newline
\end_inset

(Images adapted from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Theorem
Given a polygon 
\begin_inset Formula $P$
\end_inset

 with 
\begin_inset Formula $n$
\end_inset

 vertices and 
\begin_inset Formula $h$
\end_inset

 holes, we have 
\begin_inset Formula $0\leq\left|D(b)\right|\leq n-h-3$
\end_inset

.
\end_layout

\begin_layout Proof
This time we can observe the lower bound by taking a convex polygon with
 the holes being only triangles, oriented so that they don't have any dead
 points.
 For the upper bound, first imagine to remove the holes from 
\begin_inset Formula $P$
\end_inset

 and consider the resulting simple polygon 
\begin_inset Formula $P'$
\end_inset

.
 If 
\begin_inset Formula $n_{i}$
\end_inset

 is the number of vertices of the 
\begin_inset Formula $i$
\end_inset

th hole, then 
\begin_inset Formula $P'$
\end_inset

 has 
\begin_inset Formula $n-\sum_{i}n_{i}$
\end_inset

 vertices.
 
\begin_inset Formula $b\in P$
\end_inset

 so 
\begin_inset Formula $P'$
\end_inset

 has at most 
\begin_inset Formula $n-\sum_{i}n_{i}-3$
\end_inset

.
 Now consider a hole 
\begin_inset Formula $i$
\end_inset

, with 
\begin_inset Formula $n_{i}$
\end_inset

 vertices, and 
\begin_inset Formula $b$
\end_inset

 alone.
 At least one edge of 
\begin_inset Formula $i$
\end_inset

 is visible to 
\begin_inset Formula $b$
\end_inset

, thus 
\begin_inset Formula $i$
\end_inset

 can have at most 
\begin_inset Formula $n_{i}-1$
\end_inset

dead points on its boundary.
 The same holds for the other holes.
 By summing up the individual contributions, we get 
\begin_inset Formula $\sum_{i}\left(n_{i}-1\right)=\left(\sum_{i}n_{i}\right)-h$
\end_inset

.
 If we combine this result with the one for the ploygon without holes we
 get 
\begin_inset Formula $n-\sum_{i}n_{i}-3+\sum_{i}n_{i}-h=n-h-3$
\end_inset

 dead points.
 See figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:dead-holes"

\end_inset

 for an example.
\end_layout

\begin_layout Standard
Thanks to these theorems, we can limit the number of dead points for a beacon
 
\begin_inset Formula $b$
\end_inset

, thus we can also limit the number of its dead regions.
 We take a step further towards our goal by stating that the dead regions
 of 
\begin_inset Formula $b$
\end_inset

 togheter with 
\begin_inset Formula $A\left(b\right)$
\end_inset

 form a partition of 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Theorem
The dead regions of a beacon
\begin_inset Formula $b$
\end_inset

 in a polygon 
\begin_inset Formula $P$
\end_inset

, along with 
\begin_inset Formula $A\left(b\right)$
\end_inset

 partition 
\begin_inset Formula $P$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "thm:The-dead-regions"

\end_inset


\end_layout

\begin_layout Proof
First of all, an object starting at a point in 
\begin_inset Formula $P$
\end_inset

 will either reach 
\begin_inset Formula $b$
\end_inset

 or a dead point 
\begin_inset Formula $d$
\end_inset

, thus fulfilling the requirement that the regions taken togheter yeld 
\begin_inset Formula $P$
\end_inset

.
 It remains to show that these regions don't overlap.
 In a situation as that of Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:disambiguation"

\end_inset

, our definitions are not enough precise to decide along which edge incident
 to a reflex vertex 
\begin_inset Formula $v$
\end_inset

 an object at 
\begin_inset Formula $v$
\end_inset

 will slide.
 The problem is eliminated by adopting the convention that objects at 
\begin_inset Formula $v$
\end_inset

 go always left.
 We have ensured that an object will follow a unique path under the influence
 of 
\begin_inset Formula $b$
\end_inset

: 
\begin_inset Formula $P$
\end_inset

 is subdivided into disjoint regions.
 From what we said, each point is located in a region, so the proof is complete.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/10.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
We arbitrarily decide that 
\begin_inset Formula $p$
\end_inset

 goes always left.
\begin_inset CommandInset label
LatexCommand label
name "fig:disambiguation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/11.png
	scale 37

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An example partition, induced by 
\begin_inset Formula $b$
\end_inset

.
\begin_inset Newline newline
\end_inset

The attraction region is in green, the dead 
\begin_inset Newline newline
\end_inset

regions with their respective dead points are in red.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Visualization of the arguments of Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:The-dead-regions"

\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

This result gives us an interesting hint, because it tells us that to identify
 
\begin_inset Formula $A\left(b\right)$
\end_inset

 we can try to determine the edges of the partition induced by 
\begin_inset Formula $b$
\end_inset

.
 How to do this? It turns out that we need to use a particular kind of vertices
 in 
\begin_inset Formula $P$
\end_inset

, called split vertices.
 We elaborate on them in the next Subsection.
\end_layout

\begin_layout Subsection
Split Vertices
\begin_inset CommandInset label
LatexCommand label
name "sub:Split-Vertices"

\end_inset


\end_layout

\begin_layout Standard
We start by defining 
\emph on
cut vertices
\emph default
, which are a particular case of reflex vertices.
\end_layout

\begin_layout Definition
Given a reflex vertex 
\begin_inset Formula $p$
\end_inset

, we say that 
\begin_inset Formula $p$
\end_inset

 is a cut vertex if the ray 
\begin_inset Formula $\overrightarrow{bp}$
\end_inset

 with its origin translated to 
\begin_inset Formula $p$
\end_inset

 cuts the interior of 
\begin_inset Formula $\partial P$
\end_inset

 starting immediately from 
\begin_inset Formula $p$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/12.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is a cut vertex.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

How do we recognize a cut vertex? We can simply compute two cross products,
 as the next proposition precises.
\end_layout

\begin_layout Proposition
Given a reflex vertex 
\begin_inset Formula $p_{i}$
\end_inset

, we say it is a cut vertex if:
\end_layout

\begin_layout Proposition
1.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}<0$
\end_inset

 (Class I)
\end_layout

\begin_layout Proposition
2.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}>0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}<0$
\end_inset

 (Class II)
\end_layout

\begin_layout Proposition
3.
 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

 and 
\begin_inset Formula $\overrightarrow{bp_{i}}\times\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset

 (Class III)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/13.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is Class I cut vertex.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/14.png
	scale 53

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is Class II cut vertex.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/15.png
	scale 51

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is Class III cut vertex.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Types of cut vertices.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Now, a split vertex is just a particular case of cut vertex.
 We can identify it just by computing some additional dot products:
\end_layout

\begin_layout Proposition
Given a cut vertex 
\begin_inset Formula $p_{i}$
\end_inset

, we say it is a split vertex if and only if:
\end_layout

\begin_layout Proposition
1.
 It is a class I cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset

, 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset

b
\end_layout

\begin_layout Proposition
2.
 It is a class II cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i-1}p_{i}}>0$
\end_inset


\end_layout

\begin_layout Proposition
3.
 It is a class III cut vertex and 
\begin_inset Formula $\overrightarrow{bp_{i}}\cdot\overrightarrow{p_{i}p_{i+1}}<0$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/13.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is a Class I cut vertex and a split vertex.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/16.png
	scale 47

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is a Class II cut vertex and a split vertex.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/17.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset

 is a Class III cut vertex and a split vertex.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Types of split vertices.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Given a beacon 
\begin_inset Formula $b$
\end_inset

 and a split vertex 
\begin_inset Formula $p_{i}$
\end_inset

 with respect to 
\begin_inset Formula $b$
\end_inset

, we can identify the corresponding 
\emph on
split edge
\emph default
 by considering the first intersection of the ray 
\begin_inset Formula $\overrightarrow{bp_{i}}$
\end_inset

 starting at 
\begin_inset Formula $p_{i}$
\end_inset

 with 
\begin_inset Formula $\partial P$
\end_inset

, which we call the 
\emph on
ray vertex
\emph default
.
 Split edges play a central role in the partition induced by a beacon: they
 are the boundary between two adjacent regions (although in polygons wih
 holes they might be entirely contained in a region).
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/19.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $v$
\end_inset

 is the ray vertex correspoinding to 
\begin_inset Formula $p$
\end_inset

.
 
\begin_inset Formula $\overline{pv}$
\end_inset

 is a split edge.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Theorem
Given a simple polygon 
\begin_inset Formula $P$
\end_inset

 and one of its split edges 
\begin_inset Formula $e=\overline{p_{i}q_{i}}$
\end_inset

 with respect to a beacon 
\begin_inset Formula $b$
\end_inset

 (
\begin_inset Formula $q_{i}$
\end_inset

 is the ray vertex), 
\begin_inset Formula $e$
\end_inset

 represents the boundary between two dead regions or between 
\begin_inset Formula $A\left(b\right)$
\end_inset

 and a dead region.
 This might not be the case for a polygon with holes, where 
\begin_inset Formula $e$
\end_inset

 might be entirely contained in the interior of 
\begin_inset Formula $A\left(b\right)$
\end_inset

 or a dead region, but it can intersect at most one region.
\begin_inset CommandInset label
LatexCommand label
name "thm:Given-a-simple"

\end_inset


\end_layout

\begin_layout Proof
Consider first the case where 
\begin_inset Formula $P$
\end_inset

 is simple.
 Then 
\begin_inset Formula $e$
\end_inset

 represents a diagonal of 
\begin_inset Formula $P+q_{i}$
\end_inset

.
 This polygon is divided into two parts, that we call 
\begin_inset Formula $P_{L}$
\end_inset

and 
\begin_inset Formula $P_{R}$
\end_inset

.
 We need to figure out how an object could possibly cross 
\begin_inset Formula $e$
\end_inset

 under the attracion of 
\begin_inset Formula $b$
\end_inset

, and show that any possible case is infeasible.
 Objects placed on 
\begin_inset Formula $e$
\end_inset

 will eventually reach 
\begin_inset Formula $p_{i}$
\end_inset

 and slide left, because of our convention.
 What's more, an object moving unconstrained under the influence of 
\begin_inset Formula $b$
\end_inset

 could never cross 
\begin_inset Formula $e$
\end_inset

 and switch between 
\begin_inset Formula $P_{L}$
\end_inset

and 
\begin_inset Formula $P_{R}$
\end_inset

, because e is parallel to the ray 
\begin_inset Formula $\overrightarrow{bp_{i}}$
\end_inset

.
 It remains to handle the case where the objects starts sliding along 
\begin_inset Formula $\partial P$
\end_inset

.
 But the crossing of 
\begin_inset Formula $e$
\end_inset

 cannot happen here, because of the following argument.
 
\begin_inset Formula $p_{i}$
\end_inset

 is a split vertex; this means that objects sliding along the edges adjacent
 to 
\begin_inset Formula $p_{i}$
\end_inset

 move away from it, thus if they are on differents sides of 
\begin_inset Formula $e$
\end_inset

, they are in different regions.
 
\begin_inset Formula $e$
\end_inset

 is on the the boundary of at most two regions, because the points on a
 ray move unconstrained until they all meet 
\begin_inset Formula $\partial P$
\end_inset

 at the same location, meaning that they will end up in the same point.
 Thus rays on different sides of 
\begin_inset Formula $e$
\end_inset

 are in different regions, that have 
\begin_inset Formula $e$
\end_inset

 as boundary.
\begin_inset Newline newline
\end_inset

If 
\begin_inset Formula $P$
\end_inset

 has holes, some points on different sides of 
\begin_inset Formula $e$
\end_inset

 could slide around a hole and end up in the same location, causing 
\begin_inset Formula $e$
\end_inset

 to be contained in a region.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/20.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An object starting at 
\begin_inset Formula $p$
\end_inset

 and moving unconstrained can never cross 
\begin_inset Formula $e$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/21.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
An object starting at 
\begin_inset Formula $p$
\end_inset

 and reaching 
\begin_inset Formula $\partial P$
\end_inset

 will always move away from 
\begin_inset Formula $p_{i}$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/22.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Objects on the same ray cast from 
\begin_inset Formula $b$
\end_inset

 end in the same point.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Visualization of the arguments of Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:Given-a-simple"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

We are now close to a correct description of a partition induced by a beacon
 
\begin_inset Formula $b$
\end_inset

 on a polygon 
\begin_inset Formula $P$
\end_inset

.
 In addition to split edges, we need to say something about the edges of
 
\begin_inset Formula $\partial P$
\end_inset

, and establish which kind of edges can form the partition.
\end_layout

\begin_layout Theorem
A boundary edge of a region in the partition of a simple polygon 
\begin_inset Formula $P$
\end_inset

 induced by a beacon 
\begin_inset Formula $b$
\end_inset

 can be either:
\end_layout

\begin_layout Theorem
1.
 An edge of 
\begin_inset Formula $P$
\end_inset

 that has not been divided by a split edge
\end_layout

\begin_layout Theorem
2.
 A split edge
\end_layout

\begin_layout Theorem
3.
 An edge of the form 
\begin_inset Formula $\left(p_{k},q_{i}\right)$
\end_inset

, 
\begin_inset Formula $\left(q_{i},p_{l}\right)$
\end_inset

 or 
\begin_inset Formula $\left(q_{i},q_{j}\right)$
\end_inset

, with 
\begin_inset Formula $q_{i}$
\end_inset

and 
\begin_inset Formula $q_{j}$
\end_inset

 adjacent ray vertices lying on the edge 
\begin_inset Formula $e=\left(p_{k},p_{l}\right)$
\end_inset

.
\begin_inset CommandInset label
LatexCommand label
name "thm:3.-An-edge"

\end_inset


\end_layout

\begin_layout Proof
For simple polygons, let us start by noticing that all the edges are on
 the boundary of one or more regions, because all the points in 
\begin_inset Formula $P$
\end_inset

 belong to the partition.
 We have already talked about split edges.
 We can easily notice that the edges descibed at the third element of our
 list are components of an edge of 
\begin_inset Formula $P$
\end_inset

, that have been split by one or more ray vertices, in such a way that they
 are on the boundary of only one region, while the original edge 
\begin_inset Formula $\left(p_{k},p_{l}\right)$
\end_inset

is on the boundary of a different region per different component.
 We are not done yet; we need to show that no other type of edge can be
 on the boundary of a region.
 Let us imagine that there exists a component 
\begin_inset Formula $c$
\end_inset

 on the boundary of a region that isn't of any type mentioned so far.
 First, it cannot be that any part of 
\begin_inset Formula $c$
\end_inset

 isn't parallel to a ray casted from the beacon 
\begin_inset Formula $b$
\end_inset

 that intesects 
\begin_inset Formula $c$
\end_inset

, because otherwise objects on some points of the ray would move unconstrained
 until they would cross 
\begin_inset Formula $c$
\end_inset

, thus sharing the region of the points on the other side of 
\begin_inset Formula $c$
\end_inset

 .
 We also have to take into account that 
\begin_inset Formula $c$
\end_inset

 would intersect 
\begin_inset Formula $P$
\end_inset

 at two points, that we may call 
\begin_inset Formula $s_{1}$
\end_inset

 and 
\begin_inset Formula $s_{2}$
\end_inset

.
 Assume that 
\begin_inset Formula $s_{1}$
\end_inset

 is the closer to 
\begin_inset Formula $b$
\end_inset

 between the two.
 Where is 
\begin_inset Formula $s_{1}$
\end_inset

? It turns out that it must be a vertex of 
\begin_inset Formula $P$
\end_inset

.
 Points on 
\begin_inset Formula $c$
\end_inset

 will reach 
\begin_inset Formula $s_{1}$
\end_inset

.
 If 
\begin_inset Formula $s_{1}$
\end_inset

 was in the interior of an edge of 
\begin_inset Formula $P$
\end_inset

, we would have crossings of 
\begin_inset Formula $c$
\end_inset

: in case 
\begin_inset Formula $s_{1}$
\end_inset

 was a dead point, objects from either side would get stuck at 
\begin_inset Formula $s_{1}$
\end_inset

, in case not, objects would slide along the edge containing 
\begin_inset Formula $s_{1}$
\end_inset

, ending again at the same dead point.
 Now if we think about which of the elements of our list has the characteristics
 of 
\begin_inset Formula $c$
\end_inset

 (acting as a separator of the points on different sides), we see that it
 is exactly a split edge, with 
\begin_inset Formula $s_{1}$
\end_inset

 as the split vertex.
\begin_inset Newline newline
\end_inset

In a polygon with holes, it might happen that some split edges or components
 of divided edges are not on the boundary of a region.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/23.png
	scale 125

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
If 
\begin_inset Formula $c$
\end_inset

 wasn't entirely parallel to 
\begin_inset Newline newline
\end_inset

a ray cast from 
\begin_inset Formula $b$
\end_inset

 that crosses it, 
\begin_inset Newline newline
\end_inset

some points would cross 
\begin_inset Formula $c$
\end_inset

.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/24.png
	scale 46

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $s_{1}$
\end_inset

 cannot be an edge dead point,
\begin_inset Newline newline
\end_inset

 because otherwise points on
\begin_inset Newline newline
\end_inset

different sides of 
\begin_inset Formula $c$
\end_inset

 would reach it.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/25.png
	height 10.3cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $s_{1}$
\end_inset

 cannot be on an edge in
\begin_inset Newline newline
\end_inset

general, because otherwise 
\begin_inset Newline newline
\end_inset

some points would cross it and 
\begin_inset Newline newline
\end_inset

go into the adjacent region.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Visualization of the arguments of Theorem 
\begin_inset CommandInset ref
LatexCommand ref
reference "thm:3.-An-edge"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Now we can define a concrete strategy for obtaining the attraction region
 algorithmically! Given a polygon 
\begin_inset Formula $P$
\end_inset

 and a beacon 
\begin_inset Formula $b$
\end_inset

, first we need to find the split vertices of 
\begin_inset Formula $P$
\end_inset

 with respect to 
\begin_inset Formula $b$
\end_inset

, then compute the corresponding ray vertices to obtain the split edges
 and the components of the divided edges of 
\begin_inset Formula $P$
\end_inset

.
 In case of a polygon with holes this is not enough; we also need to discard
 the edges that we meet twice when walking along the boundaries of the regions.
 By doing this we will obtain a set of regions, namely the dead regions,
 each containing a different dead point, and the attraction region.
\begin_inset Newline newline
\end_inset

There are a few more properties of the attraction region of a beacon that
 are worth mentioning; we give them in the next Subsection.
\end_layout

\begin_layout Subsection
Additional Properties
\end_layout

\begin_layout Proposition
If 
\begin_inset Formula $b$
\end_inset

 is a beacon, 
\begin_inset Formula $b\epsilon A\left(b\right)$
\end_inset

.
 Moreover, if 
\begin_inset Formula $V\left(b\right)$
\end_inset

 is the visibility polygon of 
\begin_inset Formula $b$
\end_inset

, we have that 
\begin_inset Formula $V\left(b\right)\subseteq A\left(b\right)$
\end_inset

 (equality might hold as well).
\end_layout

\begin_layout Theorem
Given a beacon 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $A\left(b\right)$
\end_inset

 is connected.
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Theorem
Given a beacon 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $A\left(b\right)$
\end_inset

 is convex with respect to 
\begin_inset Formula $P$
\end_inset

, if 
\begin_inset Formula $P$
\end_inset

 is simple (not necessarily if it has holes).
\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Corollary
Given a beacon 
\begin_inset Formula $b$
\end_inset

, 
\begin_inset Formula $A\left(b\right)$
\end_inset

 has no holes, if 
\begin_inset Formula $P$
\end_inset

 is simple (not necessarily if it has holes).
\end_layout

\begin_layout Theorem
The partition of 
\begin_inset Formula $P$
\end_inset

 induced by a beacon 
\begin_inset Formula $b$
\end_inset

 has boundary complexity 
\begin_inset Formula $O\left(n\right)$
\end_inset

, as well as 
\begin_inset Formula $A\left(b\right)$
\end_inset

.
 There exist cases where 
\begin_inset Formula $\Omega\left(n\right)$
\end_inset

 holds to.
\end_layout

\begin_layout Subsection
Algorithms for the Attraction Region
\end_layout

\begin_layout Standard
In this subsection we review the existing algorithms for computing the attractio
n region of a beacon 
\begin_inset Formula $b$
\end_inset

 in a polygon 
\begin_inset Formula $P$
\end_inset

.
 There are four algorithms in total.
 We will describe in detail only the first one, which is the one that was
 implented.
 In the complexity analyses, 
\begin_inset Formula $n$
\end_inset

 refers to the number of vertices of a polygon.
\end_layout

\begin_layout Subsubsection
Algorithm 1
\end_layout

\begin_layout Standard
This algorithm exploits the idea that we mentioned in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Split-Vertices"

\end_inset

.
 It employs a rotational sweep technique.
 First it sorts the vertices of a polygon radially about a beacon 
\begin_inset Formula $b$
\end_inset

, then it examines the sorted list to find split vertices, maintining a
 status of the edges intersecting the sweep line in order of increasing
 distance from the beacon.
 Once a split vertex is found, it determines the corresponding ray vertex.
 In the end it will yeld the partition induced by the beacon.
 For a polygon with holes, we have to be careful excluding edges contained
 in a region, as we mentioned in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Split-Vertices"

\end_inset

.
 We now give the pseudocode of the algorithm.
\end_layout

\begin_layout Paragraph*
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Ada,numbers=left"
inline true
status open

\begin_layout Plain Layout

procedure AttractionRegion(P, b)
\end_layout

\begin_layout Plain Layout

	Sort the vertices by angle about b, and keep in an ordered event list L=(p1,
 p2, ..., pn)     
\end_layout

\begin_layout Plain Layout

	Find the order of intersection of edges from p1 along the ray bp1 and store
 as status S
\end_layout

\begin_layout Plain Layout

	for the next vertex pi in L do
\end_layout

\begin_layout Plain Layout

		Update S as necessary
\end_layout

\begin_layout Plain Layout

		if pi is a split vertex with respect to b then
\end_layout

\begin_layout Plain Layout

			Find qi, the ray-vertex of pi with respect to b
\end_layout

\begin_layout Plain Layout

			Add qi to the arrangement of P
\end_layout

\begin_layout Plain Layout

			Add edge (pi, qi) to the arrangement of P
\end_layout

\begin_layout Plain Layout

		end if
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

	return the arrangement of P
\end_layout

\begin_layout Plain Layout

end procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $O(n\log n)$
\end_inset

 running-time algorithm in simple polygons (taken from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "alg:Algo1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

Complexity analysis
\end_layout

\begin_layout Standard
The algorithm requires a comparison-based sorting algorithm in order to
 obtain the ordered list of points.
 Since a comparisons can be done in constant time using turns, the sorting
 part takes 
\begin_inset Formula $O(n\log n)$
\end_inset

 as usual.
 Maintining a sweep line status also costs 
\begin_inset Formula $O(n\log n)$
\end_inset

.
 Determining if a vertex is a split vertex takes constant time (we saw how
 to do this in Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Split-Vertices"

\end_inset

).
 Finding the ray vertex also takes constant time, because we can exploit
 the sweep line status to find the edge on which it lies.
\begin_inset Newline newline
\end_inset

In polygons with holes, the time spent walking on regions' boundaries is
 linear, so it is dominated, for instance, by the sorting algorithm.
\begin_inset Newline newline
\end_inset

The space complexity is 
\begin_inset Formula $O(n)$
\end_inset

, because we can only find 
\begin_inset Formula $O(n)$
\end_inset

 split edges and, consequently, 
\begin_inset Formula $O(n)$
\end_inset

 components of divided edges.
\end_layout

\begin_layout Paragraph*
Implementation
\end_layout

\begin_layout Standard
In our implementation, we used a modified version of the quicksort algorithm
 in order to obtain the ordered event list, and we used a red-black binary
 search tree to maintain the sweep line status.
 An input polygon is stored and updated during the algorithm by using a
 doubly connected edge list.
 Adding a split edge and splitting the edge on which its ray vertex lies
 is achieved by a split-edge operation using the ray vertex, followed by
 a split-face that adds the split edge.
 It is worth mentioning that Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Algo1"

\end_inset

 contains a little error.
 At line 
\begin_inset Formula $3$
\end_inset

, we are asked to find the edges that intersect the ray 
\begin_inset Formula $\overrightarrow{bp_{1}}$
\end_inset

 with its origin translated at 
\begin_inset Formula $p{}_{1}$
\end_inset

, but in this way we might miss some edges that we would need to take into
 account when processing a split vertex 
\begin_inset Formula $p_{i}$
\end_inset

 coming after and that we wouldn't be able to meet as the sweep line advances
 from 
\begin_inset Formula $p_{1}$
\end_inset

 to 
\begin_inset Formula $p_{i}$
\end_inset

.
 See Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:algo-wrong"

\end_inset

 for an example.
 This error caused crashes in the implementation and it can be solved by
 including in the status the edges intersecting 
\begin_inset Formula $\overrightarrow{bp_{1}}$
\end_inset

 with its origin at 
\begin_inset Formula $b$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/29.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The sweep line (shown in green) rotates counterclockwise.
 
\begin_inset Newline newline
\end_inset

The missed edges are shown in red.
\begin_inset CommandInset label
LatexCommand label
name "fig:algo-wrong"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Algorithm 2
\end_layout

\begin_layout Standard
The second algorithm is similar to the first one, but in order to compute
 split edges it uses the geodesic triangulation data structure described
 in 
\begin_inset CommandInset citation
LatexCommand cite
key "ef07543a33454cf48f81f5668cc3d512"

\end_inset

, which we don't treat here beacuse it is not directly related to the topic.
 Basically this data structure allows performing ray shooting queries efficientl
y, after some initial preprocessing, thus avoiding sorting and maintaining
 a sweepline status, in order to find ray vertices.
\end_layout

\begin_layout Paragraph*
Complexity analysis
\end_layout

\begin_layout Standard
Preprocessing the polygon for the geodesic triangulation takes 
\begin_inset Formula $O(n\log n)$
\end_inset

, although it might be completed in linear time by using the fastest triangulati
on algorigthm known (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Chazelle:1991:TSP:120885.120892"

\end_inset

).
 A ray shooting query takes 
\begin_inset Formula $O(\log n)$
\end_inset

 for a split vertex and since we might have 
\begin_inset Formula $\Theta\left(n\right)$
\end_inset

 of them, we get a running time of 
\begin_inset Formula $O(n\log n)$
\end_inset

.
\begin_inset Newline newline
\end_inset

In polygons with holes, the preprocessing time becomes 
\begin_inset Formula $O\left(n\sqrt{h}+h^{\frac{3}{2}}\log h+n\log n\right)$
\end_inset

, while the query time is 
\begin_inset Formula $O\left(\sqrt{h}\log n\right)$
\end_inset

 (
\begin_inset CommandInset citation
LatexCommand cite
key "ef07543a33454cf48f81f5668cc3d512"

\end_inset

).
 Thus, getting the raw arrangement takes 
\begin_inset Formula $O\left(\sqrt{h}n\log n\right)$
\end_inset

, and it dominates the postprocessing time to eliminate false positives,
 which is linear as we explained before.
\begin_inset Newline newline
\end_inset

Space complexity is again 
\begin_inset Formula $O(n)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Algorithm 3
\end_layout

\begin_layout Standard
The third algorithm is more involved.
 It starts by computing a triangulation of the input polygon, form which
 it obtains its dual graph, later transformed in a directed tree, which
 it uses to select only the edges on the boundary of the attraction region,
 that are obtained by discarding the split edges that are 
\begin_inset Quotes eld
\end_inset

outside
\begin_inset Quotes erd
\end_inset

 other split edges (the path from the beacon to them crosses other split
 edges).
 For each triangle we record the split edges that propagate through it.
 A split edge that is found to be on the boundary of the attraction region
 is propagated iteratively through the triangles containing it, which will
 eventually lead to finding the ray vertex.
 The attraction region is simply the region containing the beacon.
\begin_inset Newline newline
\end_inset

In polygons with holes we do the same as for the previous algorithms, but
 only for the attraction region.
 We don't need to compute a triangulation that considers the holes of the
 polygon.
\end_layout

\begin_layout Paragraph*
Complexity Analysis
\end_layout

\begin_layout Standard
The initial triangulation can be computed in 
\begin_inset Formula $O(n)$
\end_inset

 time, thanks to the algorithm described in 
\begin_inset CommandInset citation
LatexCommand cite
key "Chazelle:1991:TSP:120885.120892"

\end_inset

.
 Its dual, from which we obtain the directed tree and a list of interesting
 triangles can be obtained in linear time by performing a search from the
 triangle containing the beacon.
 Each triangle is considered once, and for each triangle we propagate at
 most two split edges (as the attraction reagon in a simple polygon is simple
 and all edges outside it are suddenly discarded), so we have a final running
 time equal to 
\begin_inset Formula $O(n)$
\end_inset

.
\begin_inset Newline newline
\end_inset

For polygons with holes, the difference is that we would need to propagate
 
\begin_inset Formula $O(h)$
\end_inset

 edges for each triangle, because of the holes, which might contribute with
 two split edges each, possibly propagated through many triangles.
 Thus the complexity becomes 
\begin_inset Formula $O(hn)$
\end_inset

.
\begin_inset Newline newline
\end_inset

The triangulation , its dual, and the remaining data structures are all
 linear, so we get a space complexity of 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
\end_layout

\begin_layout Subsubsection
Algorithm 4
\end_layout

\begin_layout Standard
The last algorithm employs a radial trapezoidization (
\begin_inset CommandInset citation
LatexCommand cite
key "geom-2261"

\end_inset

).
 First it finds the visibility polygon of a beacon from the triangulation
 of the polygon, then it considers the remaining regions, for which it computes
 horizontal trapezoidizations in a projective space that brings the beacon
 to infinity.
 Reversing the projection yelds the radial trapezioidization of these regions.
 For each split vertex, use the trapezoidizations to find the ray vertex.
\end_layout

\begin_layout Paragraph*
Complexity Analysis
\end_layout

\begin_layout Standard
The radial trapezoidization can be computed in 
\begin_inset Formula $O\left(n\right)$
\end_inset

 time and the split edges can be found in 
\begin_inset Formula $O\left(n\right)$
\end_inset

 time too.
 Thus, the algorithm takes 
\begin_inset Formula $O\left(n\right)$
\end_inset

 time in total.
 In polygons with holes the complexity is dominated by the triangulation,
 that here considers also the holes and it's computed in 
\begin_inset Formula $O\left(n+h\log^{1+\epsilon}h\right)$
\end_inset

.
 Space complexity is linear as usual.
\end_layout

\begin_layout Section
The Inverse Attraction Region
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Inverse-Attraction"

\end_inset


\end_layout

\begin_layout Standard
All the terminology and mathematical statements in this Section are taken
 from 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

.
\end_layout

\begin_layout Subsection
Definition
\end_layout

\begin_layout Definition
Given a polygon 
\begin_inset Formula $P$
\end_inset

 and a point 
\begin_inset Formula $p\epsilon P$
\end_inset

, the inverse attraction region 
\begin_inset Formula $IA\left(p\right)$
\end_inset

 is the set of points in 
\begin_inset Formula $P$
\end_inset

 to which 
\begin_inset Formula $p$
\end_inset

 is attracted (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IA"

\end_inset

 for an example).
 
\end_layout

\begin_layout Definition
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/27.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $IA\left(p\right)$
\end_inset

 is shown in purple.
\begin_inset CommandInset label
LatexCommand label
name "fig:IA"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout --Separator--

\end_layout

\begin_layout Definition
Given a polygon 
\begin_inset Formula $P$
\end_inset

 and a subset 
\begin_inset Formula $R$
\end_inset

 of 
\begin_inset Formula $P$
\end_inset

, the inverse attraction region of 
\begin_inset Formula $R$
\end_inset

, 
\begin_inset Formula $IA\left(R\right)$
\end_inset

, is the set of points in 
\begin_inset Formula $P$
\end_inset

 that attract at least one point in 
\begin_inset Formula $R$
\end_inset

.
\end_layout

\begin_layout Subsection
Algorithm for the Inverse Attraction Region of a Point
\begin_inset CommandInset label
LatexCommand label
name "sub:Algorithm-Inverse"

\end_inset


\end_layout

\begin_layout Standard
According to 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013,biro2013beacon"

\end_inset

, in order to obtain the inverse attraction region of a point 
\begin_inset Formula $p$
\end_inset

, we can consider a line arrangement induced by a polygon 
\begin_inset Formula $P$
\end_inset

 and 
\begin_inset Formula $p$
\end_inset

, which we call 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

, constructed by taking the following sets of lines:
\end_layout

\begin_layout Enumerate
the lines defined by the edges of 
\begin_inset Formula $P$
\end_inset

; 
\end_layout

\begin_layout Enumerate
for each reflex vertex, those lines intersecting it that are perpendicular
 to its incident edges;
\end_layout

\begin_layout Enumerate
lines through 
\begin_inset Formula $p$
\end_inset

 and each reflex vertex.
\end_layout

\begin_layout Standard
The authors of 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013,biro2013beacon"

\end_inset

 claim some interesting properties for this arrangement that give ideas
 for an algorithm.
\end_layout

\begin_layout Lemma
Given two points 
\begin_inset Formula $b_{1}$
\end_inset

 and 
\begin_inset Formula $b_{2}$
\end_inset

 contained in a face 
\begin_inset Formula $F$
\end_inset

 of 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

, and given a vertex 
\begin_inset Formula $p_{i}$
\end_inset

 of 
\begin_inset Formula $P$
\end_inset

, if 
\begin_inset Formula $p_{i}$
\end_inset

 is a split vertex for 
\begin_inset Formula $b_{1}$
\end_inset

 when we consider it as a beacon, then it is also a split vertex for 
\begin_inset Formula $b_{2}$
\end_inset

 .
\end_layout

\begin_layout Standard
This interesting fact can be used to prove a even stronger result:
\end_layout

\begin_layout Theorem
Given two points 
\begin_inset Formula $b_{1}$
\end_inset

 and 
\begin_inset Formula $b_{2}$
\end_inset

 contained in a face 
\begin_inset Formula $F$
\end_inset

 of 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

, and given a point 
\begin_inset Formula $p$
\end_inset

 of 
\begin_inset Formula $P$
\end_inset

, if 
\begin_inset Formula $p\epsilon A\left(b_{1}\right)$
\end_inset

, then 
\begin_inset Formula $p\epsilon A\left(b_{2}\right)$
\end_inset

 too.
\end_layout

\begin_layout Theorem
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Andrea/Documents/ULB/Computational Geometry/Project/INFO-F-420_2015-16/src/img/andrea/28.png
	scale 35

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $s$
\end_inset

 and 
\begin_inset Formula $t$
\end_inset

 belong to the same face in 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

 but, while 
\begin_inset Formula $s$
\end_inset

 cannot attract 
\begin_inset Formula $p$
\end_inset

,
\begin_inset Newline newline
\end_inset

 
\begin_inset Formula $t$
\end_inset

 can.
 Also 
\begin_inset Formula $s'$
\end_inset

 and 
\begin_inset Formula $t'$
\end_inset

 are in the same face, but 
\begin_inset Formula $s'$
\end_inset

 attracts 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $t'$
\end_inset


\begin_inset Newline newline
\end_inset

dg does not.
 (Image redrawn from 
\begin_inset CommandInset citation
LatexCommand cite
key "Kouhestani2015OnTI"

\end_inset

)
\begin_inset CommandInset label
LatexCommand label
name "fig:IA-wrong"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a great simplification, because it's telling us that we can just
 test a single point in a face of the considered arrangement.
 Unfortunately the arrangement 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

 doesn't identify correctly the regions attracting 
\begin_inset Formula $b$
\end_inset

, as discovered by the authors of 
\begin_inset CommandInset citation
LatexCommand cite
key "Kouhestani2015OnTI"

\end_inset

 (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IA-wrong"

\end_inset

 for an example).
 There it is noted that we need to slightly modify the line arrangement,
 by considering these sets of lines:
\end_layout

\begin_layout Enumerate
line through the segments of the Shortest Path Tree of a point 
\begin_inset Formula $p$
\end_inset

 (
\begin_inset Formula $\textrm{SPT}\left(p\right)$
\end_inset

);
\end_layout

\begin_layout Enumerate
for each reflex vertex, those lines intersecting it that are perpendicular
 to its incident edges;
\end_layout

\begin_layout Enumerate
lines through the edges of 
\begin_inset Formula $P$
\end_inset

.
\end_layout

\begin_layout Standard
With this arrangement the algorithm works properly (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Kouhestani2015OnTI"

\end_inset

 for details).
 Note that the lines through 
\begin_inset Formula $\textrm{SPT}\left(p\right)$
\end_inset

 include the sets of lines at the first and third position in the list for
 the original arrangement, and that the last set of lines is there to discrimina
te the points that are inside 
\begin_inset Formula $P$
\end_inset

.
 The authors of 
\begin_inset CommandInset citation
LatexCommand cite
key "Kouhestani2015OnTI"

\end_inset

 claim the following about the new 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

.
\end_layout

\begin_layout Lemma
Given two points 
\begin_inset Formula $b_{1}$
\end_inset

 and 
\begin_inset Formula $b_{2}$
\end_inset

 and a point 
\begin_inset Formula $p$
\end_inset

, if 
\begin_inset Formula $b_{1}$
\end_inset

 and 
\begin_inset Formula $b_{2}$
\end_inset

 are in the same region of 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

, they either both attract 
\begin_inset Formula $p$
\end_inset

 or not.
\end_layout

\begin_layout Standard
We now give the pseudocode of the algorithm.
\end_layout

\begin_layout Paragraph*
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Ada,numbers=left"
inline true
status open

\begin_layout Plain Layout

procedure InverseAttractionRegion(P, p)
\end_layout

\begin_layout Plain Layout

	Initialize Ap = ∅
\end_layout

\begin_layout Plain Layout

	Compute SPT(p)
\end_layout

\begin_layout Plain Layout

	for each edge e in SPT(p)
\end_layout

\begin_layout Plain Layout

		Add line e to Ap
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

	for each reflex vertex r in P do
\end_layout

\begin_layout Plain Layout

		Add line rp to Ap
\end_layout

\begin_layout Plain Layout

		Add the lines r1 and r2 through r and perpendicular        
\end_layout

\begin_layout Plain Layout

			to the edges incident on r to Ap
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

	for each edge e in P do
\end_layout

\begin_layout Plain Layout

		Add line e to Ap
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

	Remove duplicate lines in Ap
\end_layout

\begin_layout Plain Layout

	Initialize IA(p) = ∅
\end_layout

\begin_layout Plain Layout

	for each face F of Ap do
\end_layout

\begin_layout Plain Layout

		Choose an arbitrary point bF of F and compute A(bF)
\end_layout

\begin_layout Plain Layout

		if p ∈ A(bF ) then
\end_layout

\begin_layout Plain Layout

			Add F to IA(p)
\end_layout

\begin_layout Plain Layout

		end if
\end_layout

\begin_layout Plain Layout

	end for
\end_layout

\begin_layout Plain Layout

	return IA(p), the inverse attraction region of p
\end_layout

\begin_layout Plain Layout

end procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $O(n^{2})$
\end_inset

running-time algorithm for 
\begin_inset Formula $IA(p)$
\end_inset

 (adapted from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset

Complexity Analysis
\end_layout

\begin_layout Standard
This algorithm uses an attraction region algorithm (
\begin_inset Formula $O\left(n\right)$
\end_inset

/
\begin_inset Formula $O\left(n+h\log^{1+\epsilon}h\right)$
\end_inset

) and it tests, for each attraction region computed, if the given point
 is in it (
\begin_inset Formula $O\left(n\right)$
\end_inset

).
 The shortest path tree can be computed in linear time (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Guibas:1986:LTA:10515.10516"

\end_inset

).
 There are 
\begin_inset Formula $O\left(n^{2}\right)$
\end_inset

 faces in the arrangement, but walking through them in a breadth-first fashion
 using the dual graph allows updating the attraction regions quickly, making
 the overall complexity 
\begin_inset Formula $O\left(n^{2}\right)$
\end_inset

.
\begin_inset Newline newline
\end_inset

The space complexity is 
\begin_inset Formula $O\left(n^{2}\right)$
\end_inset

.
\end_layout

\begin_layout Paragraph*
Implementation
\end_layout

\begin_layout Standard
The algorithm was implemented straightforwardly, without any optimization.
 Thus, it might be a bit slow in some cases (the user needs to wait a second
 or two to see the result) due to the fact that the faces of the arrangement
 tend to explode.
 For quite complex polygons the algorithm might get stuck.
 The algorithm for the attraction region that was developed earlier has
 been used here.
\end_layout

\begin_layout Subsection
Algorithm for the Inverse Attraction Region of a Region
\end_layout

\begin_layout Standard
To compute the attraction region of a region, it is convenient to consider
 a modified version of the line arrangement described above.
 We call the new arrangement 
\begin_inset Formula $\mathit{A_{R}}$
\end_inset

 and we obtain it by considering the lines from each reflex vertex of the
 input regions through each reflex vertex of the input polygon, thus modifying
 the set of lines at position 3 of the original arrangement for the attraction
 region of a point.
 This arrangement has a property that is similar to that of 
\begin_inset Formula $\mathit{A_{p}}$
\end_inset

 with respect to attracting points in a region.
\end_layout

\begin_layout Theorem
Given two points 
\begin_inset Formula $b_{1}$
\end_inset

 and 
\begin_inset Formula $b_{2}$
\end_inset

 contained in a face 
\begin_inset Formula $F$
\end_inset

 of 
\begin_inset Formula $\mathit{A_{R}}$
\end_inset

, if 
\begin_inset Formula $R\cap A\left(b_{1}\right)\neq\varnothing$
\end_inset

, then 
\begin_inset Formula $R\cap A\left(b_{2}\right)\neq\varnothing$
\end_inset

 .
\end_layout

\begin_layout Standard
Thanks to this fact we can easily determine te attraction region of 
\begin_inset Formula $R$
\end_inset

, by using a point for each face of the arrangement.
 Since the arrangement for the attraction region of a point was incorrect,
 it might be that this arrangement is incorrect too, but we didn't investigate
 on this.
\end_layout

\begin_layout Section
Algorithms for Beacon-Based Routing
\begin_inset CommandInset label
LatexCommand label
name "sec:Algorithms-for-Beacon-Based"

\end_inset


\end_layout

\begin_layout Standard
All the terminology and mathematical statements in this Section are taken
 from 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

.
\begin_inset Newline newline
\end_inset

Now that we have seen how to compute the attraction region and the inverse
 attraction region, we would like to use them in order to perform beacon-based
 routing.
 We would also like to find the minimum routing paths each time.
 In this section we consider first the case where we are given a set of
 candidate beacons, then the case where we have no beacons except the destinatio
n, which we solve with a nearly optimal approximation algorithm.
\end_layout

\begin_layout Subsection
Algorithm for Routing with Candidate Beacons
\end_layout

\begin_layout Standard
This algorithm's main task consists in building a directed graph, that has
 the candidate beacons, the starting point 
\begin_inset Formula $s$
\end_inset

 and the destination 
\begin_inset Formula $t$
\end_inset

 as nodes, and edges of the type 
\begin_inset Formula $\overrightarrow{\left(u,v\right)}$
\end_inset

 if 
\begin_inset Formula $u\in A\left(v\right)$
\end_inset

.
 Once the graph is computed, the routing path is simply a shortest path
 between the starting point and the destination.
 We now give the pseudocode of the algorithm.
\end_layout

\begin_layout Paragraph*
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Ada,numbers=left"
inline true
status open

\begin_layout Plain Layout

procedure Minimum Beacon Path with Candidates(P,M, s, t)
\end_layout

\begin_layout Plain Layout

	Compute a triangulation T of P 
\end_layout

\begin_layout Plain Layout

	C = M ∪ s ∪ t 
\end_layout

\begin_layout Plain Layout

	Initialize directed graph G = (C, ∅) 
\end_layout

\begin_layout Plain Layout

	for each c ∈ C do 
\end_layout

\begin_layout Plain Layout

		Compute A(c) 
\end_layout

\begin_layout Plain Layout

		for each triangle t ∈ T do 
\end_layout

\begin_layout Plain Layout

			Record the subset of t that is attractable to c     
\end_layout

\begin_layout Plain Layout

			for each d ∈ M ∩ t do 
\end_layout

\begin_layout Plain Layout

				if d ∈ A(c) then 
\end_layout

\begin_layout Plain Layout

					Add directed edge dc to G 
\end_layout

\begin_layout Plain Layout

				end if 
\end_layout

\begin_layout Plain Layout

			end for 
\end_layout

\begin_layout Plain Layout

		end for 
\end_layout

\begin_layout Plain Layout

	end for 
\end_layout

\begin_layout Plain Layout

	Find a shortest path p from s to t in G 
\end_layout

\begin_layout Plain Layout

	return the sequence of beacons in p 
\end_layout

\begin_layout Plain Layout

end procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $O(m(n+m))$
\end_inset

running-time algorithm in 
\begin_inset Newline newline
\end_inset

simple polygons (taken from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Complexity Analysis
\end_layout

\begin_layout Standard
In a simple polygon, the main contribution to the time complexity is given
 by the for loop.
 There are 
\begin_inset Formula $m+2$
\end_inset

 point in 
\begin_inset Formula $C$
\end_inset

, and for each of them we spend 
\begin_inset Formula $O\left(n\right)$
\end_inset

 time computing its attraction region and 
\begin_inset Formula $O\left(n+m\right)$
\end_inset

 time to determine the edges o include in 
\begin_inset Formula $G$
\end_inset

, yelding a total running time of 
\begin_inset Formula $O\left(m\left(n+m\right)\right)$
\end_inset

.
 In a polygon with holes, the triangulation now takes 
\begin_inset Formula $O\left(n+h\log^{1+\epsilon}h\right)$
\end_inset

 time.
 As before we spend 
\begin_inset Formula $O\left(n\right)$
\end_inset

 for each attraction region, but 
\begin_inset Formula $O\left(n+m\log h\right)$
\end_inset

 to identify the candidate beacons in the triangles.
 Thus the total running time is 
\begin_inset Formula $O\left(mn+m^{2}\log h+h\log^{1+\epsilon}h\right)$
\end_inset

.
 The space complexity is dominated by the attraction regions and it's 
\begin_inset Formula $O\left(mn\right)$
\end_inset

.
\end_layout

\begin_layout Paragraph*
Implementation
\end_layout

\begin_layout Standard
When it came to implementing the algorithm, it didn't seem necessary to
 compute a triangulation and to examine each of the resulting triangles.
 Indeed, simply checking each ordered pair of beacons is enough, and it
 doesn't increase the time complexity.
 The shortest path is found by using Dijkstra's shortest path algorithm.
\end_layout

\begin_layout Subsection
Approximation Algorithm
\end_layout

\begin_layout Standard
This algorithm starts from a triangulation of a given polygon, then it builds
 a directed graph in the following way: the nodes are the triangles in the
 triangulation, and if a triangle 
\begin_inset Formula $b$
\end_inset

 intersect the inverse attraction region of another triangle 
\begin_inset Formula $a$
\end_inset

, add the directed edge 
\begin_inset Formula $\overrightarrow{ba}$
\end_inset

 to the graph (see 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

 for the computation of the inverse attraction region of a region).
 To find a sequence of beacons routing 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

, find a shortest path between the triangles containing the two points using
 the graph, and finally take a beacon for each triangle, using the information
 on the inverse attraction regions.
 The pseudocode of this algorithm follows.
\end_layout

\begin_layout Paragraph*
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Ada,numbers=left"
inline true
status open

\begin_layout Plain Layout

procedure Approximate Minimum Beacon Path(P, s, t)
\end_layout

\begin_layout Plain Layout

	Compute a triangulation T of P
\end_layout

\begin_layout Plain Layout

	Initialize directed graph G = (T , ∅) 
\end_layout

\begin_layout Plain Layout

	for each triangle a ∈ T do 
\end_layout

\begin_layout Plain Layout

		Compute IA(a) 
\end_layout

\begin_layout Plain Layout

		for each triangle b ∈ T do 
\end_layout

\begin_layout Plain Layout

			if b ∩ IA(a) ≠ ∅ then 
\end_layout

\begin_layout Plain Layout

				Add directed edge → ba to G 
\end_layout

\begin_layout Plain Layout

			end if 
\end_layout

\begin_layout Plain Layout

		end for 
\end_layout

\begin_layout Plain Layout

	end for 
\end_layout

\begin_layout Plain Layout

	Find a shortest path p from s to t in G
\end_layout

\begin_layout Plain Layout

	for each triangle a on the shortest path starting from t do 
\end_layout

\begin_layout Plain Layout

		Find the corresponding ‘attracting’ point and ‘attracted’ point 
\end_layout

\begin_layout Plain Layout

		Link the points together along the shortest path
\end_layout

\begin_layout Plain Layout

	end for 
\end_layout

\begin_layout Plain Layout

	return the sequence of beacons 
\end_layout

\begin_layout Plain Layout

end procedure
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

running-time algorithm (taken from 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

)
\end_layout

\end_inset


\end_layout

\end_inset

Complexity Analysis
\end_layout

\begin_layout Standard
The running time is determined by the computations of the inverse attraction
 regions of the triangles.
 As explained in 
\begin_inset CommandInset citation
LatexCommand cite
key "biro2013beacon"

\end_inset

, this takes 
\begin_inset Formula $O\left(n^{2}\right)$
\end_inset

 time.
 Since we do this for each triangle, the total running time is 
\begin_inset Formula $O\left(n^{3}\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
We can compare the length of the path obtained with this algorithm with
 thathof the minimum one thanks to the following lemma.
\end_layout

\begin_layout Lemma
The shortest path from the triangle containing 
\begin_inset Formula $s$
\end_inset

 to that containing 
\begin_inset Formula $t$
\end_inset

 in the graph described above is at most that of a minimum beacon path from
 
\begin_inset Formula $s$
\end_inset

 to 
\begin_inset Formula $t$
\end_inset

.
\end_layout

\begin_layout Standard
Since the beacon path obtained by the algorithm uses two beacons for each
 triangle, we have an amount of beacons that is at most two times the necessary
 beacons.
 If we iteratively compute the inverse attraction region for each triangle
 ( 
\begin_inset Formula $\textrm{IA}\left(...\textrm{IA}\left(a\right)\right)$
\end_inset

 ), we obtain a beacon path that has at most 
\begin_inset Formula $k+1$
\end_inset

 beacons every 
\begin_inset Formula $k$
\end_inset

 beacons in the optimal path.
 This gives us a polynomial-time approximation of the minimum beacon path
 (see 
\begin_inset CommandInset citation
LatexCommand cite
key "Biro2013,biro2013beacon"

\end_inset

).
\end_layout

\begin_layout Section
Applet
\begin_inset CommandInset label
LatexCommand label
name "sec:Applet"

\end_inset


\end_layout

\begin_layout Standard
An applet was developed to illustrate interactively the main concepts of
 this page.
 It can be reached by clicking on the button below.
 Instructions are included in the destination page.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "geometric-routing,routing-guarding,inverse,10516,geodesic,triang,trap"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
